{
  "name": "NgRepeat vs *ngFor",
  "tagline": "This blog demonstrates difference between NgRepeat and *ngFor.",
  "body": "#*ngFor in Angular2\r\n\r\nThis repo contains a small snippet that compares **ng-repeat** of **Angular 1.x** with **\\*ngFor** of **Angular 2**.\r\n\r\nWell, to start of with - **ng-repeat** directive will NOT be available in **Angular 2**. It has been replaced by a new directive i.e. **\\*ngFor**.\r\n\r\n> Here is a recap:\r\n\r\n* **ng-repeat** directive instantiated template once per item for a collection.\r\n* Each template instance had its own scope.\r\n* Special properties were available for each template instance : **$index**, **$first**, **$middle**, **$last**, **$even**, **$odd**.\r\n* **ng-repeat** by default did not allow duplicate elements. A tracking function was responsible for this task.\r\n* In order to add duplicate items, **track by** expression was used.\r\n* Here is a small snippet:\r\n\r\n```JavaScript\r\n$scope.items = ['eat','sleep','work','eat']\r\n```\r\n\r\n```HTML\r\n<div ng-repeat=\"item in items track by $index\">{{$index+1}} : {{item}}</div>\r\n```\r\n\r\n* Object properties could also be iterated over. Here is a snippet for that:\r\n\r\n```JavaScript\r\n$scope.personDetails = {name:'Namita',age:'25'}\r\n```\r\n\r\n```HTML\r\n<div ng-repeat=\"(key, value) in personDetails\">{{key}} : {{value}}</div>\r\n```\r\n\r\nNow, let's move to main agenda of this discussion i.e. **\\*ngFor**. Let's start.\r\n\r\n* The major difference between **ng-repeat** and **\\*ngFor** is its syntax. Here is a small snipped\r\n\r\n```HTML\r\n<ul>\r\n    <li *ngFor=\"#item of items\">{{item}}</li>\r\n</ul\r\n```\r\n\r\n* **\\*ngFor** is based on **JavaScript's** `for of` loop hence it can be used to iterate over **Arrays**, **Map**, **Set**. However it cannot be used to iterate over object properties straightaway.\r\n>One of the possible work around could be extracting the keys from an object and then iterating it over the keys or use Map instead of object.\r\n\r\n* Also other important difference is use of `#refs`. `#refs` would be widely used in **Angular2**. In this case `#item` contain the value of each item. `#refs` hold the reference of the element in cases such as:\r\n\r\n> `ng-repeat` created inherited child scope for each element of collection, while `*ngFor` creates local variable in the that block.\r\n\r\n```HTML\r\n<input type=\"text\" #inputText>\r\n```\r\n\r\nFor the above case:\r\n\r\n`inputText` would contain the reference of the element i.e. `<input type=\"text\">`. `inputText.value` would contain the actual value entered in the input box.\r\n\r\n* You would also be wondering what is the asterisk (\\*) sign for. Asterisk (\\*) sign is nothing but a syntactic sugar.\r\n\r\n* Like **ng-repeat**, each instance element receives properties like **odd**, **even** , **last**, **index**. I have used these properties in the small example below:\r\n\r\n```TypeScript\r\n/**\r\n * Created by Namita Malik on 4/5/16.\r\n */\r\n\r\nimport {Component} from 'angular2/core';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    template: `\r\n    <h1>{{title}}</h1>\r\n    <h2>Enter To Do Items Below:</h2>\r\n    <input (keyup.enter)=\"onKey(todo)\" #todo>\r\n    <div *ngIf=\"toDoList.length>0\">\r\n        <p>Your To Do Items:</p>\r\n    </div>\r\n    <div style=\"padding: 10px 0 0 0\">\r\n    <table width=\"300\" border=\"1\" cellpadding=\"5\" style=\"text-align: center\">\r\n        <tr>\r\n            <th>Index</th>\r\n            <th>To Do Item</th>\r\n        </tr>\r\n        <tr *ngFor=\"#toDo of toDoList, #i=index, #last=last, #odd=odd, #even=even\"  [ngClass]=\"{'odd-color':odd, 'even-color':even, 'last-color' : last }\">\r\n            <td>{{i}}</td>\r\n            <td>{{toDo}}</td>\r\n        </tr>\r\n    </table>\r\n    </div>\r\n    `\r\n})\r\n\r\nexport class AppComponent {\r\n    toDo = {\r\n        item: ''\r\n    };\r\n    title = 'My To Do List';\r\n    toDoList = [];\r\n\r\n    onKey(todo) {\r\n        this.toDoList.push(todo.value);\r\n        todo.value = '';\r\n    }\r\n}\r\n```\r\n\r\n>Note: It is not advisable to create grid structure using table tags but to keep the things simple I have used it here.\r\n\r\n* As demonstrated above we have used index property to get the index of each item in the collection and assigned it to local variable `#i`. Similarly we have used other properties and assigned them to local variables in order to apply the classes conditionally on the table rows.\r\n\r\nFor example: `odd-color` class is applied on the row when item is odd. `odd` property returns a `true` or `false` on the basis of item index which is then assigned to local variable `#odd`.\r\n    \r\n* **Angular2** allows duplicate values in **\\*ngFor** so we don't need **trackBy** any more and for unique value we use **Set**.\r\n\r\nIn order to run the demo given in this repo, clone this repository. Go inside the repo and write `npm install`. This would bring required node modules for you.\r\n\r\nNow, run open **index.html** in your favourite browser!\r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/NamitaMalik)\r\n\r\n[Twitter](https://twitter.com/namita13_04)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/namita-malik-a7885b23)\r\n\r\n[More Blogs By Me](https://namitamalik.github.io/)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}